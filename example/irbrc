# This is an example irbrc which can be used as follows:
#
# Start vanilla irb (irb -f) and run
#
#   load 'irbrc'
#
# When you copy this file as your ~/.irbrc, you need to adjust
# - the path to the irb extender
# - probably the path to the plugins
#
# The recommended "least configuration" setup looks like this
#
# ~/
# ~/.irbrc
# ~/.irb/extender/
# ~/.irb/extender/init.rb
# ~/.irb/extender/...
# ~/.irb/plugins/
# ~/.irb/plugins/helper           # directory for helpers
#                                 # every helper is included into a common helper module
#                                 # and this is available via irb_helper
# ~/.irb/plugins/lib              #
# ~/.irb/plugins/lib/fine.rb      # plugin_library 'fine' will require this file
#                                 # ruby 1.8: beware of naming a plugin or "local" file like
#                                 # a file in your current directory (load path contains ".")
#
# ~/.irb/plugins/nice_plugin.rb
# ~/.irb/plugins/weird_plugin.rb
# ~/.irb/plugins/helpful_plugin.rb
# ~/.irb/plugins/...

##################################################

require File.expand_path("../../init", __FILE__)      # the example setup

::FailsafeLoading.run(self) do
  # The plugins_example directory
  # If you are not using plugins or the plugins directory is a sibling
  # of your extender directory, this need not to be configured
  # config[:plugins] = File.expand_path("../.irb/plugins", __FILE__)
  #
  config[:plugins] = File.expand_path("../plugins", __FILE__)

  # Whether to show backtraces when an error occures
  # config[:backtrace] = false

  # Color output
  # config[:color] = true

  # No output
  # config[:quiet] = false

  # simple library loading
  library 'rubygems'

  # advanced libary loading - allows library customization - see wirble.rb
  # if the plugin supports a config, it can be provided here
  plugin 'wirble', :config => {:init_color => true}

  # example for a library which is not available
  plugin_library 'unavailable_library'

  # example where the plugin itself raises an error
  plugin 'fail'

  # example where the library loaded by the plugin raises an error
  plugin 'failing_library_load'

  # examples for conditionally not trying a configured plugin
  plugin 'skipped_by_value', :only_if => false

  # the helper provides any methods defined in plugin/helper
  plugin 'skipped_by_lambda', :only_if => lambda {|helper| false}
end
